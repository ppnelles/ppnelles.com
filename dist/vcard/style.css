@import url(https://fonts.googleapis.com/css?family=Oswald:400|Open+Sans:400,700);html{line-height:1.15;-webkit-text-size-adjust:100%}main{display:block}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}abbr[title]{border-bottom:none;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}@-webkit-keyframes intro{0%,60%{opacity:0;-webkit-transform:translateX(-100vw);transform:translateX(-100vw)}to{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes intro{0%,60%{opacity:0;-webkit-transform:translateX(-100vw);transform:translateX(-100vw)}to{opacity:1;-webkit-transform:translateX(0);transform:translateX(0)}}@-webkit-keyframes reveal{0%,30%{opacity:0}to{opacity:.85}}@keyframes reveal{0%,30%{opacity:0}to{opacity:.85}}body{background:#e8e8db url(../vcard/img/bg.jpg) 0 0 repeat;color:#333;padding:1em 1em 0;margin:0;font-size:calc(20px + .25vw);text-align:center}figure{margin:0;padding:0}header{display:inline-block;-webkit-transform:matrix(1,-.1,0,1,0,0);transform:matrix(1,-.1,0,1,0,0)}header figure.profile-pic{text-align:center;margin:0}header figure.profile-pic img{display:inline-block;width:200px;height:auto;border-radius:200px;mix-blend-mode:darken;opacity:.85;-webkit-animation:reveal 1.5s ease-in -.5s;animation:reveal 1.5s ease-in -.5s}h1{font-family:Oswald,Sans-serif;font-weight:400;font-size:calc(3rem + 1.2vw);line-height:1;text-shadow:2px 2px #e3e3dc,4px 4px #d5bcb6;margin:-70px 0 0;-webkit-animation:intro 1.25s -1s 1;animation:intro 1.25s -1s 1}h1,h2{text-transform:uppercase}h2{font-family:Open Sans,Sans-serif;font-weight:700;font-size:1rem;letter-spacing:.1em;margin:1em 0;position:relative;-webkit-animation:intro 1.45s -1s 1;animation:intro 1.45s -1s 1}@media (min-width:28.125em){h2{font-size:calc(1rem + .25vw)}}h2:after,h2:before{content:" ";position:absolute;top:4px;width:20px;height:4px;border-top:2px solid #555}h2:before{margin:5px 0 0 -30px}h2:after{margin:5px 0 0 10px}h3{font-family:Open Sans,Sans-serif;text-transform:uppercase;font-weight:700;font-size:.8rem}@media (min-width:28.125em){h3{font-size:calc(1rem + .1vw);letter-spacing:1px}}ul.links{padding:0;margin:1em 0 0}ul.links li{margin:0;padding:0;list-style:none;display:inline-block;margin:0 .25em;-webkit-animation:reveal 2.75s ease-out -.5s;animation:reveal 2.75s ease-out -.5s}ul.links li:nth-child(2){-webkit-animation-delay:-.5s;animation-delay:-.5s}ul.links li:nth-child(3){-webkit-animation-delay:-.4s;animation-delay:-.4s}ul.links li:nth-child(4){-webkit-animation-delay:-.3s;animation-delay:-.3s}ul.links li:nth-child(5){-webkit-animation-delay:-.2s;animation-delay:-.2s}ul.links li:nth-child(6){-webkit-animation-delay:-.1s;animation-delay:-.1s}ul.links li:nth-child(7){-webkit-animation-delay:0s;animation-delay:0s}ul.links a{color:#333;text-decoration:none}ul.links a i{-webkit-transition:all .15s ease-out;transition:all .15s ease-out;color:#333}ul.links a:hover .fa-linkedin-in{color:#007ab9}ul.links a:hover .fa-github{color:#000}ul.links a:hover .fa-strava{color:#fc4c02}ul.links a:hover .fa-bolt{color:#469}ul.links a:hover .fa-instagram{color:#e4405f}ul.links a:hover .fa-lastfm{color:#b90000}ul.links a:hover .fa-envelope{color:#00afbf}.job-information{margin:4em 0 0}.job-information h3{-webkit-animation:reveal 2.75s ease-out -.2s;animation:reveal 2.75s ease-out -.2s}.job-information ul{margin:0;padding:0;display:-webkit-box;display:flex;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center}.job-information ul li{margin:0;padding:0;list-style:none;width:50%;max-width:150px;margin:0 1em}.job-information ul li:first-child{-webkit-animation:reveal 2.75s ease-out -.1s;animation:reveal 2.75s ease-out -.1s}.job-information ul li:nth-child(2){-webkit-animation:reveal 2.75s ease-out 0s;animation:reveal 2.75s ease-out 0s}.job-information ul img{-webkit-transition:all .15s ease-out;transition:all .15s ease-out;-webkit-filter:grayscale(100%);filter:grayscale(100%);mix-blend-mode:multiply;opacity:.85;display:block;max-height:120px;width:auto}.job-information ul img:hover{-webkit-filter:grayscale(0);filter:grayscale(0);opacity:1;mix-blend-mode:normal}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
